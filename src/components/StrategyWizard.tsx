import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ArrowLeft, ArrowRight, Download, RefreshCw, TrendingUp, Users, Target, Compass, Layers, CheckCircle2 } from "lucide-react";
import StepOne, { SelectedPoint } from "@/components/strategy-steps/StepOne";
import StepTwo from "@/components/strategy-steps/StepTwo";
import StepThree from "@/components/strategy-steps/StepThree";
import StepFour from "@/components/strategy-steps/StepFour";
import StepFive from "@/components/strategy-steps/StepFive";

interface StrategyWizardProps {
  pdfContent: string;
  onReset: () => void;
}

const STORAGE_KEY = "strategyWizardState";

const StrategyWizard = ({ pdfContent, onReset }: StrategyWizardProps) => {
  const loadState = () => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) {
        const parsed = JSON.parse(raw);
        // Ensure content is for the same PDF (very basic check)
        if (parsed.pdfContent === pdfContent) {
          return parsed;
        }
      }
    } catch {
      // Ignore/invalid
    }
    // Initial state if nothing found
    return {
      currentStep: 1,
      stepData: {
        step1: "",
        step2: "",
        step3: "",
        step4: "",
        step5: "",
      },
      selectedForMatrix: [],
    };
  };

  const saveState = (next: any) => {
    try {
      const toSave = { ...next, pdfContent };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));
    } catch {
      // Ignore
    }
  };

  // Initialize state from storage
  const [currentStep, setCurrentStepState] = useState(1);
  const [stepData, setStepDataState] = useState({
    step1: "",
    step2: "",
    step3: "",
    step4: "",
    step5: "",
  });
  const [selectedForMatrix, setSelectedForMatrixState] = useState<SelectedPoint[]>([]);

  useEffect(() => {
    const st = loadState();
    setCurrentStepState(st.currentStep);
    setStepDataState(st.stepData);
    setSelectedForMatrixState(st.selectedForMatrix);
  // Only run on mount and if PDF changes
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pdfContent]);

  // Sync all state to localStorage on change
  useEffect(() => {
    saveState({
      currentStep,
      stepData,
      selectedForMatrix,
    });
  }, [currentStep, stepData, selectedForMatrix, pdfContent]);

  const steps = [
    { number: 1, title: "STEEP Analysis", subtitle: "Market Forces", icon: TrendingUp, component: StepOne, color: "from-blue-500 to-indigo-500" },
    { number: 2, title: "Scenario Matrix", subtitle: "Key Uncertainties", icon: Compass, component: StepTwo, color: "from-indigo-500 to-purple-500" },
    { number: 3, title: "Competitor Analysis", subtitle: "Market Position", icon: Users, component: StepThree, color: "from-purple-500 to-pink-500" },
    { number: 4, title: "DOTS Framework", subtitle: "Strategic Planning", icon: Target, component: StepFour, color: "from-pink-500 to-red-500" },
    { number: 5, title: "Three Horizons", subtitle: "Growth Strategy", icon: Layers, component: StepFive, color: "from-red-500 to-orange-500" },
  ];

  const updateStepData = (step: number, data: string) => {
    setStepDataState(prev => {
      const next = {
        ...prev,
        [`step${step}`]: data
      };
      return next;
    });
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const nextStep = () => {
    if (currentStep < 5) {
      setCurrentStepState(currentStep + 1);
      scrollToTop();
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStepState(currentStep - 1);
      scrollToTop();
    }
  };

  const goToStep = (stepNumber: number) => {
    setCurrentStepState(stepNumber);
    scrollToTop();
  };

  const exportStrategy = () => {
    const strategyDocument = `
CORPORATE STRATEGY PLAN
Generated by StrategyBuilder

${steps.map((step, index) => `
${step.number}. ${step.title.toUpperCase()}
${stepData[`step${step.number}` as keyof typeof stepData] || 'Not completed'}
`).join('\n')}

Generated on: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([strategyDocument], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'corporate-strategy-plan.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // On reset, clear localStorage wizard state as well
  const handleReset = () => {
    localStorage.removeItem(STORAGE_KEY);
    onReset();
  };

  const progressPercentage = (currentStep / 5) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50">
      {/* Modern Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-gray-100 shadow-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button 
                variant="ghost" 
                onClick={handleReset}
                className="hover:bg-gray-100 transition-colors duration-200"
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Upload
              </Button>
              <div className="flex items-center space-x-3">
                <div className="relative">
                  <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-2 rounded-xl shadow-lg">
                    <Target className="h-5 w-5 text-white" />
                  </div>
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                </div>
                <h1 className="text-xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent">
                  Strategy Development
                </h1>
              </div>
            </div>
            <Button 
              onClick={exportStrategy} 
              className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transition-all duration-300"
            >
              <Download className="h-4 w-4 mr-2" />
              Export Strategy
            </Button>
          </div>
        </div>
      </header>

      <div className="max-w-6xl mx-auto px-6 py-8">
        {/* Enhanced Progress Section */}
        <Card className="mb-8 border-0 shadow-xl shadow-blue-100/30 bg-white/80 backdrop-blur-sm">
          <CardHeader className="pb-6">
            <div className="flex items-center justify-between mb-6">
              <div className="space-y-2">
                <CardTitle className="text-2xl font-bold text-gray-900 flex items-center space-x-3">
                  <div className={`p-2 rounded-xl bg-gradient-to-r ${steps[currentStep - 1].color} shadow-lg`}>
                    {(() => {
                      const IconComponent = steps[currentStep - 1].icon;
                      return <IconComponent className="h-5 w-5 text-white" />;
                    })()}
                  </div>
                  <span>Step {currentStep}: {steps[currentStep - 1].title}</span>
                </CardTitle>
                <CardDescription className="text-base text-gray-600">
                  {steps[currentStep - 1].subtitle}
                </CardDescription>
              </div>
              <div className="text-right">
                <div className="text-2xl font-bold text-blue-600">{Math.round(progressPercentage)}%</div>
                <div className="text-sm text-gray-500">Complete</div>
              </div>
            </div>
            <div className="relative">
              <Progress value={progressPercentage} className="w-full h-3" />
              <div className="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-indigo-500/20 rounded-full"></div>
            </div>
          </CardHeader>
        </Card>

        {/* Modern Step Navigation */}
        <div className="flex justify-center mb-12">
          <div className="bg-white/90 backdrop-blur-sm rounded-2xl border border-gray-100 p-2 shadow-xl shadow-gray-100/50 max-w-5xl w-full">
            <div className="flex justify-between">
              {steps.map((step, index) => {
                const isActive = currentStep === step.number;
                const isCompleted = currentStep > step.number;
                const isNext = currentStep < step.number;
                const IconComponent = step.icon;
                
                return (
                  <div key={step.number} className="flex items-center flex-1">
                    <button
                      onClick={() => goToStep(step.number)}
                      className={`
                        relative flex flex-col items-center space-y-2 px-3 py-4 rounded-xl transition-all duration-500 ease-out font-medium text-xs w-full group
                        ${isActive 
                          ? 'bg-gradient-to-br from-blue-600 to-indigo-600 text-white shadow-xl shadow-blue-600/30 scale-105 transform' 
                          : isCompleted 
                            ? 'bg-gradient-to-br from-green-50 to-emerald-50 text-green-700 hover:from-green-100 hover:to-emerald-100 border border-green-200 hover:shadow-lg' 
                            : isNext
                              ? 'text-gray-400 hover:text-gray-600 hover:bg-gray-50/50'
                              : 'text-gray-600 hover:bg-gray-50/50'
                        }
                      `}
                    >
                      {/* Icon and number container */}
                      <div className={`
                        flex items-center justify-center w-10 h-10 rounded-full transition-all duration-500 flex-shrink-0
                        ${isActive 
                          ? 'bg-white/20 backdrop-blur-sm border-2 border-white/30' 
                          : isCompleted 
                            ? 'bg-green-600 text-white shadow-lg' 
                            : isNext
                              ? 'bg-gray-100 text-gray-400 border-2 border-gray-200'
                              : 'bg-gray-200 text-gray-600 border-2 border-gray-300'
                        }
                      `}>
                        {isCompleted ? (
                          <CheckCircle2 className="w-5 h-5" />
                        ) : isActive ? (
                          <IconComponent className="w-5 h-5" />
                        ) : (
                          <span className="text-sm font-bold">{step.number}</span>
                        )}
                      </div>
                      
                      {/* Text content */}
                      <div className="text-center space-y-1 min-w-0 flex-1">
                        <div className={`font-semibold leading-tight transition-colors duration-300 ${
                          isActive ? 'text-white' : isCompleted ? 'text-green-700' : 'text-gray-600'
                        }`}>
                          {step.title}
                        </div>
                        <div className={`text-xs leading-tight transition-colors duration-300 ${
                          isActive ? 'text-white/80' : isCompleted ? 'text-green-600' : 'text-gray-500'
                        }`}>
                          {step.subtitle}
                        </div>
                      </div>
                      
                      {/* Active indicator */}
                      {isActive && (
                        <div className="absolute -bottom-3 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-full animate-pulse"></div>
                      )}

                      {/* Hover effect overlay */}
                      <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    </button>
                    
                    {/* Enhanced connector line */}
                    {index < steps.length - 1 && (
                      <div className={`
                        w-4 h-0.5 mx-2 transition-all duration-500 flex-shrink-0 relative
                        ${currentStep > step.number ? 'bg-gradient-to-r from-green-400 to-green-500' : 'bg-gray-200'}
                      `}>
                        {currentStep > step.number && (
                          <div className="absolute inset-0 bg-gradient-to-r from-green-400 to-green-500 rounded-full animate-pulse"></div>
                        )}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        {/* Enhanced Step Content Container */}
        <div className="mb-8 animate-fade-in">
          <Card className="border-0 shadow-xl shadow-gray-100/50 bg-white/80 backdrop-blur-sm overflow-hidden">
            <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 to-indigo-500"></div>
            <CardContent className="p-8">
              {
              currentStep === 1 ? (
                <StepOne
                  pdfContent={pdfContent}
                  data={stepData.step1}
                  onDataChange={(data: string) => updateStepData(1, data)}
                  onNext={(pts) => { 
                    setSelectedForMatrixState(pts); 
                    setCurrentStepState(2);
                    scrollToTop();
                  }}
                />
              ) : currentStep === 2 ? (
                <StepTwo
                  pdfContent={pdfContent}
                  data={stepData.step2}
                  onDataChange={(data: string) => updateStepData(2, data)}
                  selectedPoints={selectedForMatrix}
                  onNext={() => {
                    setCurrentStepState(3);
                    scrollToTop();
                  }}
                />
              ) : currentStep === 3 ? (
                <StepThree
                  pdfContent={pdfContent}
                  data={stepData.step3}
                  onDataChange={(data: string) => updateStepData(3, data)}
                />
              ) : currentStep === 4 ? (
                <StepFour
                  pdfContent={pdfContent}
                  data={stepData.step4}
                  onDataChange={(data: string) => updateStepData(4, data)}
                />
              ) : currentStep === 5 ? (
                <StepFive
                  pdfContent={pdfContent}
                  data={stepData.step5}
                  onDataChange={(data: string) => updateStepData(5, data)}
                />
              ) : null
            }
            </CardContent>
          </Card>
        </div>

        {/* Enhanced Navigation Buttons */}
        {currentStep !== 1 && currentStep !== 2 && (
          <div className="flex justify-between">
            <Button
              variant="outline"
              onClick={prevStep}
              disabled={currentStep === 1}
              className="bg-white/80 backdrop-blur-sm hover:bg-white border-gray-200 hover:border-gray-300 shadow-lg hover:shadow-xl transition-all duration-300"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Previous Step
            </Button>
            
            <Button
              onClick={nextStep}
              disabled={currentStep === 5}
              className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transition-all duration-300"
            >
              Next Step
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default StrategyWizard;
