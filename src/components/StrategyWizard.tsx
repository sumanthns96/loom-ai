import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ArrowLeft, ArrowRight, Download, RefreshCw, TrendingUp, Users, Target, Compass, Layers } from "lucide-react";
import StepOne, { SelectedPoint } from "@/components/strategy-steps/StepOne";
import StepTwo from "@/components/strategy-steps/StepTwo";
import StepThree from "@/components/strategy-steps/StepThree";
import StepFour from "@/components/strategy-steps/StepFour";
import StepFive from "@/components/strategy-steps/StepFive";

interface StrategyWizardProps {
  pdfContent: string;
  onReset: () => void;
}

const STORAGE_KEY = "strategyWizardState";

const StrategyWizard = ({ pdfContent, onReset }: StrategyWizardProps) => {
  const loadState = () => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) {
        const parsed = JSON.parse(raw);
        // Ensure content is for the same PDF (very basic check)
        if (parsed.pdfContent === pdfContent) {
          return parsed;
        }
      }
    } catch {
      // Ignore/invalid
    }
    // Initial state if nothing found
    return {
      currentStep: 1,
      stepData: {
        step1: "",
        step2: "",
        step3: "",
        step4: "",
        step5: "",
      },
      selectedForMatrix: [],
    };
  };

  const saveState = (next: any) => {
    try {
      const toSave = { ...next, pdfContent };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));
    } catch {
      // Ignore
    }
  };

  // Initialize state from storage
  const [currentStep, setCurrentStepState] = useState(1);
  const [stepData, setStepDataState] = useState({
    step1: "",
    step2: "",
    step3: "",
    step4: "",
    step5: "",
  });
  const [selectedForMatrix, setSelectedForMatrixState] = useState<SelectedPoint[]>([]);

  useEffect(() => {
    const st = loadState();
    setCurrentStepState(st.currentStep);
    setStepDataState(st.stepData);
    setSelectedForMatrixState(st.selectedForMatrix);
  // Only run on mount and if PDF changes
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pdfContent]);

  // Sync all state to localStorage on change
  useEffect(() => {
    saveState({
      currentStep,
      stepData,
      selectedForMatrix,
    });
  }, [currentStep, stepData, selectedForMatrix, pdfContent]);

  const steps = [
    { number: 1, title: "Analyze STEEP Factors", component: StepOne },
    { number: 2, title: "Key Uncertainty Scenario Matrix", component: StepTwo },
    { number: 3, title: "Competitor Analysis", component: StepThree },
    { number: 4, title: "DOTS", component: StepFour },
    { number: 5, title: "McKinsey's Three Horizon Model", component: StepFive },
  ];

  const updateStepData = (step: number, data: string) => {
    setStepDataState(prev => {
      const next = {
        ...prev,
        [`step${step}`]: data
      };
      return next;
    });
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const nextStep = () => {
    if (currentStep < 5) {
      setCurrentStepState(currentStep + 1);
      scrollToTop();
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStepState(currentStep - 1);
      scrollToTop();
    }
  };

  const goToStep = (stepNumber: number) => {
    setCurrentStepState(stepNumber);
    scrollToTop();
  };

  const exportStrategy = () => {
    const strategyDocument = `
CORPORATE STRATEGY PLAN
Generated by StrategyBuilder

${steps.map((step, index) => `
${step.number}. ${step.title.toUpperCase()}
${stepData[`step${step.number}` as keyof typeof stepData] || 'Not completed'}
`).join('\n')}

Generated on: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([strategyDocument], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'corporate-strategy-plan.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // On reset, clear localStorage wizard state as well
  const handleReset = () => {
    localStorage.removeItem(STORAGE_KEY);
    onReset();
  };

  const progressPercentage = (currentStep / 5) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button variant="ghost" onClick={handleReset}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Upload
              </Button>
              <h1 className="text-2xl font-bold text-gray-900">Strategy Development</h1>
            </div>
            <Button onClick={exportStrategy} className="bg-blue-600 hover:bg-blue-700">
              <Download className="h-4 w-4 mr-2" />
              Export Strategy
            </Button>
          </div>
        </div>
      </header>

      <div className="max-w-6xl mx-auto px-6 py-8">
        {/* Progress Header */}
        <Card className="mb-8">
          <CardHeader>
            <div className="flex items-center justify-between mb-4">
              <CardTitle className="text-xl">
                Step {currentStep} of 5: {steps[currentStep - 1].title}
              </CardTitle>
              <span className="text-sm text-gray-500">{Math.round(progressPercentage)}% Complete</span>
            </div>
            <Progress value={progressPercentage} className="w-full" />
          </CardHeader>
        </Card>

        {/* Clean Professional Step Navigation */}
        <div className="flex justify-center mb-8">
          <div className="bg-white rounded-2xl border border-gray-100 p-1 shadow-lg shadow-gray-100/50">
            <div className="flex">
              {steps.map((step, index) => {
                const isActive = currentStep === step.number;
                const isCompleted = currentStep > step.number;
                const isNext = currentStep < step.number;
                
                return (
                  <div key={step.number} className="flex items-center">
                    <button
                      onClick={() => goToStep(step.number)}
                      className={`
                        relative flex items-center space-x-3 px-6 py-4 rounded-xl transition-all duration-300 ease-out font-medium text-sm
                        ${isActive 
                          ? 'bg-blue-600 text-white shadow-lg shadow-blue-600/25 scale-105' 
                          : isCompleted 
                            ? 'bg-green-50 text-green-700 hover:bg-green-100 border border-green-100' 
                            : isNext
                              ? 'text-gray-400 hover:text-gray-600 hover:bg-gray-50'
                              : 'text-gray-600 hover:bg-gray-50'
                        }
                      `}
                    >
                      <div className={`
                        flex items-center justify-center w-8 h-8 rounded-full text-sm font-semibold transition-all duration-300
                        ${isActive 
                          ? 'bg-white text-blue-600' 
                          : isCompleted 
                            ? 'bg-green-600 text-white' 
                            : isNext
                              ? 'bg-gray-100 text-gray-400'
                              : 'bg-gray-200 text-gray-600'
                        }
                      `}>
                        {isCompleted ? (
                          <div className="w-3 h-3 bg-white rounded-full"></div>
                        ) : (
                          step.number
                        )}
                      </div>
                      
                      <span className="hidden sm:block whitespace-nowrap">
                        {step.title}
                      </span>
                      
                      {/* Active indicator */}
                      {isActive && (
                        <div className="absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-blue-600 rounded-full"></div>
                      )}
                    </button>
                    
                    {/* Connector line */}
                    {index < steps.length - 1 && (
                      <div className={`
                        w-8 h-0.5 mx-2 transition-all duration-300
                        ${currentStep > step.number ? 'bg-green-300' : 'bg-gray-200'}
                      `}></div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        {/* Current Step Content */}
        <div className="mb-8">
          {currentStep === 1 ? (
            <StepOne
              pdfContent={pdfContent}
              data={stepData.step1}
              onDataChange={(data: string) => updateStepData(1, data)}
              onNext={(pts) => { 
                setSelectedForMatrixState(pts); 
                setCurrentStepState(2);
                scrollToTop();
              }}
            />
          ) : currentStep === 2 ? (
            <StepTwo
              pdfContent={pdfContent}
              data={stepData.step2}
              onDataChange={(data: string) => updateStepData(2, data)}
              selectedPoints={selectedForMatrix}
              onNext={() => {
                setCurrentStepState(3);
                scrollToTop();
              }}
            />
          ) : currentStep === 3 ? (
            <StepThree
              pdfContent={pdfContent}
              data={stepData.step3}
              onDataChange={(data: string) => updateStepData(3, data)}
            />
          ) : currentStep === 4 ? (
            <StepFour
              pdfContent={pdfContent}
              data={stepData.step4}
              onDataChange={(data: string) => updateStepData(4, data)}
            />
          ) : currentStep === 5 ? (
            <StepFive
              pdfContent={pdfContent}
              data={stepData.step5}
              onDataChange={(data: string) => updateStepData(5, data)}
            />
          ) : null}
        </div>

        {/* Navigation Buttons */}
        {currentStep !== 1 && currentStep !== 2 && (
          <div className="flex justify-between">
            <Button
              variant="outline"
              onClick={prevStep}
              disabled={currentStep === 1}
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Previous Step
            </Button>
            
            <Button
              onClick={nextStep}
              disabled={currentStep === 5}
              className="bg-blue-600 hover:bg-blue-700"
            >
              Next Step
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default StrategyWizard;
